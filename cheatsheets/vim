# Vim

## Other sources

- https://devhints.io/vimscript
- https://thevaluable.dev/vim-advanced/
- https://vim.rtorr.com/
- https://quickref.me/vim

## Keyboard

```
<ctrl-o> Go back to previous location

# Insert tab character when expandtab is on
<ctrl+v><tab>

# Show all keyboard shortcuts mappings
:map            # and :imap :vmap :nmap
:verbose map    # show mapping and where they were defined
:verbose map k  # show mapping for key

# Open previously opened file
CTRL-^ (ctrl-shift-6)

# Insert literal tab character
CTRL-V <tab>

<C-u>  deletes one line (in insert mode)
fa     goes to the next a character on the same line (in command mode)
"kyy   copies the current line into register k
"kp    paste the content of the register k
```

### Movement

- `{` and `}` move to beginning/end of paragraph

### `g`

- `gf` edit the file under the cursor
  - `ctrl-o` to come back
  - `ctrl+w ctrl+f` to open in a new window
  - It can also open URL with `netrw`
- `gi` move to the last insertion you did and switch to INSERT mode
  - `gv` same thing with visual mode
- `gn` move to the match of your last search
- `gI` insert text at beginning of line whatever the first character (!= `I`)
- `ga` print the `a`scii value of the character under the cursor in decimal, hex and octal

### Keyboard shortcuts: window

```
ctrl-v =    # resizes the split panes to become equal
```

## Custom keyboard shortcuts

```raw
<leader>pw   show the Python documentation for the word under the cursor.
<F7>         runs `flake8` on the current file.
qgic         rewraps the comment block (thanks to vim-textobj-comment)
```

## Text handling

```raw
# Delete empty lines
:g/^$/d

# Insert a blank line after each line
:g/^/norm o

:g/^   acts on every line that matches the ^ regex.
norm o execute the command o in normal mode

# Delete all lines matching patterns
:g/profile/d

# Expand all tabs after having changed settings
:retab

# Add the word under the cursor to spell file
zg

# Include output of external bash command
:read !date
# Read file into current buffer
:read /path/to/file
```

## Ranges

- `<number>` refers to a line number
- `.+<number>` refers to current number + number
- `.` current line (usually default range)
- `$` last line of current buffer
- `%` entire file (same as `1,$`)
- `*` last selection with VISUAL mode

E.g. with `d`:

- `:1,40d` delete line 1 to 40 included
- `:2,$d` keep only first line
- `:.,$d` delete from this line to end of file

## Quickfix window

Check [A Vim Guide for Advanced Users](https://thevaluable.dev/vim-advanced/) for more info.

- `:cn` or `:cnext` move to next entry
- `:cdo <cmd>` execute a command on each valid entry of current quickfix

## Registers

- `:reg` get content of register
- In INSERT mode, `CTRL+R <reg>` put the content of register in the buffer.
- In INSERT mode, `CTRL+R =` lets you enter vimscript expression and output their result in the current buffer.

Types of registers:

- `"`: unnamed register, contains last deleted/yanked/changed content even if a register was specified
- `0`, `1`, ... `9`: history of registers
- `-`: small delete register. Any deleted/changed content smaller than one line.
- `a` to `z`: named registers, use capital letter e.g. `A` to append
- Read-only registers:
  - `.` last inserted text
  - `%` name of current file
  - `:` most recent command line executed
- `#`: alternate buffer for the current window
- `=`: store the result of an expression
- `+`: system clipboard
- `*`: selection clipboard (*nix systems)
- `_`: equivalent to `/dev/null`
- `/`: last search pattern

## Macros

- `@:` redo last command (e.g. `:s/foo/bar`)

## File handling

- `:new`: create new buffer

### netrw

```raw
%    create file
:help netrw
```

## Vimscript

```vimscript
" Echo a durable message

echom "message"

" Current file path
expand('%')      " relative path
expand('%:p')    " full path
expand('%:p:h')  " full directory ('head') path
```

## Editor config

```vimscript
" Check config value
verbose set modeline?

" Set indentation size in spaces
set tabstop=4
set shiftwidth=4

" Disable syntax highlighting
set syntax=off

" Change spellcheck lang (might trigger spell files download)
:setlocal spelllang=fr

" Re run syntax highlighting
syn off | syn on

" Show hidden chars
:set list
```

## Modeline

Exercise caution: using modeline has security implications.

```python
# vim: set ft=python:
```

## Marks

`:help mark-motions`

- `a`-`z`: local to buffer
- `A`-`Z`: global to multiple buffers
- `0`-`9`: readonly, used when quitting the file
- `>`, `<`: search (can be modified)
- `ma` mark position with 'a'
- `'a` go to 'a'
- `:marks` display marks
- ```[`` move to first character of the previously changed/yanked/deleted content
- ```]`` move to last character of the previously changed/yanked/deleted content

## Numbers

- `:help CTRL-A`
- `:help CTRL-X`
- `:help nrformats`

- `CTRL+a` increase the first digit or number on the line
- `CTRL+x` decrease the first digit or number on the line
- `g CTRL+a` increase numbers on the VISUAL selection sequentially
- `g CTRL+x` decrease numbers on the VISUAL selection sequentially

## Regex

Inspired by [vimtips](http://rayninfo.co.uk/vimtips.html).

- Prefix pattern with `\v` to have all regex metacharacters (`v`ery magic)
- `:sm` instead of `:s` to have almost all metacharacters (except `(`, `)`, `|`) (`s`ubstitute `m`agic)
- `:sno` for `no` magic.
- Prefix pattern with `\V` for none of the metachars.

For instance these are equivalent:

```text
:%s/\V(/
:%sm/(/
:%s/\(/
```

Other commands:

- `:&&` repeat the last substitute with its flags
- `:~` repeat the last substitute with the same replacement but the last used *search* pattern
- `&` (NORMAL): repeat the last substitute without ranges and flags
- `g&` (NORMAL): same flags, replace pattern with last *search* pattern.

### Commands

- Structure: `:g/pattern/command`
- E.g. `:g/toaster/d` deletes all lines matching "toaster".

Normal mode commands:

- `:norm <command>` run `<command>` in normal mode, respecting user shortcuts
- `:norm! <command>` uses default vim behavior (mandatory when writing a plugin)
- `:norm daw` delete word under cursor
- `:g/toaster/norm gu$` lower cases all lines matching "toaster"

### Example regexes

```text
# Replace all date in format `YYYYMMDD` to `MM/DD/YYYY`:
%s/\(20\d\{2}\)\(\d\{2}\)\(\d\{2}\)/\2\/\3\/\1/g

# Delete everything in parentheses
:%s/(.*)//g

# Grab email only, replacing the whole line
# File:
# Charlax <toaster@toasting.org>
:%s/.*<\([a-z.@]\+\)>/\1/g

# Delete everything after a character
# * Toaster: 1
# * Toaster: 2
# To delete everything after `:`:
:%s/:.*//

# Replace newline character "^M" and "^@"
:%s/<Ctrl-V><Ctrl-M>/\r/g

# Lower case words in markdown frontmatter
:1,10g/^\w\+/norm gue

# Add a unique id to Markdown titles
#
# This is a good example of a complex regex which uses `\=` to trigger vim
# command execution.
%s%^\(#\+.*\)$%\=submatch(1).' (id::'.substitute(system('LC_ALL=C tr -cd "[:alnum:]" < /dev/urandom | fold -w15 | head -n1'), '\n','','g').')'%g
# BEFORE:
# Test
# AFTER:
# Test (id::nYgp7segfLWXeWM)

# Convert each NAME_LIKE_THIS to NameLikeThis in the current line.
:s#_*\(\u\)\(\u*\)#\1\L\2#g

# Match a whole word i.e. OS but not iOS
s/\<OS\>/OperatingSystem/g

# Wrap all lines in quotes
:%s/^\(.*\)$/"\1"/

# Wrap all words in line with backticks
:'<,'>s/\v([a-z]+)/`\1`/g
```

## Plugins

### ALE (linting)

`:ALENext` go to next error. Can also be mapped:

```vimscript
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
```

### Surround

- `ysiw*` add `*` around word
- `yss'` add `'` around line

### Ultisnips

```vimscript
:UltiSnipsEdit  " edit snippets for current filetype
```

<!-- vim: set ft=markdown: -->
