# https://stedolan.github.io/jq/manual/
# https://codefaster.substack.com/p/mastering-jq-part-1-59c
#
# Also check:
# - zq https://www.brimdata.io/blog/introducing-zq/

# To pretty print the json:
jq "." < filename.json

# To access the value at key "foo":
jq '.foo'
jq -r '.foo'  # output raw string (without quotes)

# To access first list item:
jq '.[0]'

# to slice and dice:
jq '.[2:4]'
jq '.[:3]'
jq '.[-2:]'

# Show 'url' value for each array item
jq '.[].url'

# Select multiple fields
jq '.items[] | {title,name}'
jq '.items[] | {t: .title, n: .truc.name}'
jq '.items[] | .title, .truc.name}'

# Select based on key presence
jq ".items[] | select(.truc.name == null) | ."

# Select with multiple conditions
jq '.items[] | select(.truc == "toaster" and .machin == "bidule")'

# Output as json (needs array as input, and raw output)
jq -r '.items[] | [.foo,.bar] | @csv'

# Parsing datetime
now | strftime("%Y-%m-%d")
jq '[.[] | select(.date_field > (now | strftime("%Y-%m-%d")))]'

# Show keys
jq keys

# See also:
# zq https://www.brimdata.io/blog/introducing-zq/
# jless (interactive) https://jless.io/user-guide (rust)
# fx (interactive) https://fx.wtf/key-bindings (go) can be useful to get the jq path quickly
