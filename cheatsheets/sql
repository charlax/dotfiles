
-- DDL
-- ===

DROP DATABASE IF EXISTS dbname;
ALTER TABLE users ADD PRIMARY KEY (id);
ALTER TABLE contacts ADD CONSTRAINT contacts_user_id FOREIGN KEY (user_id) REFERENCES users (id);
ALTER TABLE users ADD COLUMN has_stuff BOOLEAN DEFAULT false;

create table toaster (id int primary key, color varchar);

-- Index
-- -----

create index index_name on table_name (column_name);

-- Datetime

-- sqlite: https://www.sqlite.org/lang_datefunc.html

-- Parse created_at as unix timestamp
select datetime(created_at, "unixepoch") from table;
select date(created_at, "unixepoch") from table;
select time(created_at, "unixepoch") from table;

-- With modifiers (useful for timezone):
select time(created_at, "unixepoch", "5 hours") from table;

-- Difference between two datetime columns in seconds
SELECT strftime('%s', column1) - strftime('%s', column2) AS delta_seconds
FROM your_table;

-- Group by hour and minute:

-- MySQL
select date_format(created_at, "%Y-%m-%d %H:%i")
from table
group 1
order by 1 asc

-- Postgres
select date_trunc('day', created_at), user_id, count(*)
from event_logs
group by 1, 2
order by 1 asc;

-- Postgres

 also `psql` cheat sheet.
i--

```sql
-- datetime
now() - interval '2 days'
```

-- Select
-- ======

case when boolval then 'value if true' else 'value if false' end

CASE
    WHEN frequency = 0 THEN 'OFF'
    WHEN frequency = 31 THEN 'Daily'
    WHEN frequency = 1 THEN 'Weekly'
    WHEN frequency = 21 THEN 'MWF'
    ELSE cast(frequency as varchar)
END AS frequency_label,

-- Insert
-- ======

insert into tablename (col1, col2) values (value1, value2);

-- Update from subquery
-- ====================

-- with subquery
UPDATE users
SET has_email = subquery.has_email
FROM (SELECT user_id, CASE WHEN count(*) > 0 THEN true ELSE false END AS has_email FROM emails GROUP BY user_id) AS subquery
WHERE users.user_id = subquery.user_id;

-- with CTE
WITH subquery AS (
SELECT user_id, CASE WHEN count(*) > 0 THEN true ELSE false END AS has_email FROM emails GROUP BY user_id
)
UPDATE users
SET has_email = subquery.has_email
FROM subquery
WHERE users.user_id = subquery.user_id;

-- Window
-- ======

-- Compute running total using ROWS UNBOUNDED PRECEDING:

SELECT
  sales_date,
  daily_sales,
  SUM(daily_sales) OVER (ORDER BY sales_date ROWS UNBOUNDED PRECEDING) AS running_total
FROM
  sales;

-- See also
-- ========

-- `./presto`
-- cookbook

-- vim: set ft=sql:
