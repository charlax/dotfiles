-- DDL
-- ===
show create table table_name;
drop database if exists dbname;
alter table users add primary key (id);
alter table contacts add constraint contacts_user_id foreign key (user_id) references users (id);
alter table users add column has_stuff boolean default false;

create table toaster (id int primary key, color varchar);

-- Index
-- -----

create index index_name on table_name (column_name);

-- CTE (Common Table Expression)
-- =============================

-- With multiple CTE
with toasters as (select name, color from toasters),
toasts as (select type, number from toasts)

select toasters.*

-- Datetime

-- sqlite: https://www.sqlite.org/lang_datefunc.html
-- presto: ./presto

-- Parse created_at as unix timestamp
select datetime(created_at, "unixepoch") from table;
select date(created_at, "unixepoch") from table;
select time(created_at, "unixepoch") from table;

-- With modifiers (useful for timezone):
select time(created_at, "unixepoch", "5 hours") from table;

-- Difference between two datetime columns in seconds
SELECT strftime('%s', column1) - strftime('%s', column2) AS delta_seconds
FROM your_table;

-- Group by hour and minute:

-- MySQL
select date_format(created_at, "%Y-%m-%d %H:%i")
from table
group 1
order by 1 asc

-- Postgres
-- see also `psql` cheat sheet.

select date_trunc('day', created_at), user_id, count(*)
from event_logs
group by 1, 2
order by 1 asc;

select now() - interval '2 days';

-- Group by day in another column's timezone
select date_format(date_trunc('day', cast(from_unixtime(o.created_at/1000, o.timezone) as timestamp)), '%Y-%m-%d'),

-- Select
-- ======

-- CASE

case when boolval then 'value if true' else 'value if false' end

case
    when frequency = 0 then 'off'
    when frequency = 31 then 'daily'
    when frequency = 1 then 'weekly'
    when frequency = 21 then 'mwf'
    else cast(frequency as varchar)
end as frequency_label,

-- Can also be used with CONCAT
select CONCAT(region, ' ', CASE WHEN product = 'toaster' then 'Toaster' else 'other' end)

-- GROUP BY (with total)

select level,
count(*),
(count(*) * 100.0 / (select count(*) from df)) as percentage
from df group by level

-- Insert
-- ======

insert into tablename (col1, col2) values (value1, value2);

-- Update from subquery
-- ====================

-- with subquery
UPDATE users
SET has_email = subquery.has_email
FROM (SELECT user_id, CASE WHEN count(*) > 0 THEN true ELSE false END AS has_email FROM emails GROUP BY user_id) AS subquery
WHERE users.user_id = subquery.user_id;

-- with CTE
WITH subquery AS (
SELECT user_id, CASE WHEN count(*) > 0 THEN true ELSE false END AS has_email FROM emails GROUP BY user_id
)
UPDATE users
SET has_email = subquery.has_email
FROM subquery
WHERE users.user_id = subquery.user_id;

-- Window
-- ======

-- Compute running total using ROWS UNBOUNDED PRECEDING:

SELECT
  sales_date,
  daily_sales,
  SUM(daily_sales) OVER (ORDER BY sales_date ROWS UNBOUNDED PRECEDING) AS running_total
FROM
  sales;

-- See also
-- ========

-- `./presto`
-- cookbook
-- psql
-- sqlformat (prettify sql)

-- vim: set ft=sql:
