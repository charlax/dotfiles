;; vi:syntax=clojure
;; https://clojure.org/api/cheatsheet
;; https://kimh.github.io/clojure-by-example/

;; Maps
(def my-map {:first-name "Chew" :last-name "Bacca"})

;; Collections
(cons 1 '(2 3))    ; returns (1 2 3) cons(truct) by prepending
(cons 1 [2 3])     ; returns (1 2 3) (same)

;; (conj coll x & xs)  adds element(s) in the most efficient location possible
(conj '(2 3) 1)    ; returns (1 2 3) conj(oin) by prepending because concrete type is a list
(conj '(2 3) 1 0)  ; returns (0 1 2 3)
(conj [1 2] 3)     ; returns [1 2 3] conj(oin) by appending because concrete type is a vector

;; (concat c1 c2 &colls)  merges existing collections, returns lazy seq
(concat '(1 2) '(3) '(4 5))  ; returns (1 2 3 4 5)

;; Strings
(str "a" "b")     ; concat
(clojure.string/join ", " [1 2 3])

;; Functions
(map (fn [arg] (inc arg)) [1 2 3])

;; Quoting
'(+ 1 (inc 1))
; => '(+ 1 (inc 1))
;; Syntax quoting and unquoting (~)
`(+ 1 ~(inc 1))
; => (clojure.core/+ 1 2)

;; Macros
(defmacro double-it
  "Given a function name, define it twice, eg (double-it foot [] ) creates foo and foo*"
  [fname args & body]
  `(do (defn ~fname ~args ~@body)
       (defn ~(symbol (str fname "*")) ~args ~@body)))
; Usage
(double-it afunc [str] (println str))
(afunc "asdf")
(afunc* "asdf")
(macroexpand (mymacro :foo))
