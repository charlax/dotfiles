# Get the git authors' email for the last 60 days
git log --since=60.days --format='%ae' | sort -u

# List committers sorted by number of commits
git shortlog -ns

# Checkout commit by date
git checkout `git rev-list -n 1 --before="2016-03-29 12:00" master`

# Show which local branch is tracking which remote branch (git)
git remote show origin

# Show commits by author
git log --author="..."

# Diff: show only staged changes
git diff --cached

# Diff: show only file names, using relative path
git diff --relative --name-only

# Show unmerged branches
git branch --no-merged master
git branch --merged  # show merged branches

# Undo last merge
git reset --hard ORIG_HEAD

# Remove last commit
git reset --hard HEAD~1

# Squash and merge
git checkout master
git merge --squash name-of-branch
git commit  # should preserve the old commit messages

# Show name of current branch
git rev-parse --abbrev-ref HEAD

# Reword specific commit
git rebase -i COMMIT_ID
# then pick "reword" on the relevant commit

# Delete untracked files
git clean -n  # dry run
git clean -f  # actually delete the files

# Solving git conflicts

Open the file in Vim, then :Gdiffsplit!

Left is target, middle is working copy, right is merge branch
So when rebasing: left is master, and right is our work.

1. Move to the chunk you want to keep and use the `dp` shortcut ("diff put")
2. Once if the file is done, `:Gwrite`

http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/

# Show git tags on remote
git ls-remote --tags origin

# Run prettier on all changed files
git diff --name-only dev --relative ./ | xargs -n1 ./node_modules/.bin/prettier --write
