# List committers sorted by number of commits
git shortlog -ns

# Checkout commit by date
git checkout `git rev-list -n 1 --before="2016-03-29 12:00" master`

# Show which local branch is tracking which remote branch (git)
git remote show origin

# Get the git authors' email for the last 60 days
git log --since=60.days --format='%ae' | sort -u

# Show commits by author
git log --author="..."

# Show diff with a change matching "query"
git log -p -G query

# Show git log excluding changes in a folder
git log . ':!subfolder_to_ignore'

# Diff: show only staged changes
git diff --cached
# Diff: show only file names, using relative path
git diff --relative --name-only
# Diff: do not show deleted files
git diff --name-only --diff-filter=ACMR

# Show unmerged branches
git branch --no-merged master
git branch --merged  # show merged branches

# Undo last merge
git reset --hard ORIG_HEAD
# Undo last rebase
git reset --hard ORIG_HEAD

# Undo changes in submodule
git submodule update --init
# Update submodule to latest remote commit
git submodule update --remote --merge

# Remove last commit
git reset --hard HEAD~1

# Squash and merge
git checkout master
git merge --squash name-of-branch
git commit  # should preserve the old commit messages

# Show name of current branch
git rev-parse --abbrev-ref HEAD

# Reword specific commit
git rebase -i COMMIT_ID
# then pick "reword" on the relevant commit

# Delete untracked files
git clean -n  # dry run
git clean -f  # actually delete the files

# Solving git conflicts

Open the file in Vim, then :Gvdiffsplit!

Left is target, middle is working copy, right is merge branch
So when rebasing: left is master, and right is our work.

1. Move to the chunk (with `]c` next chunk, `[c` previous) you want to keep and use the `dp` shortcut ("diff put")
2. Once if the file is done, `:Gwrite`

http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/

# Show git tags on remote
git ls-remote --tags origin

# Run prettier on all changed files
git diff --name-only dev --relative ./ | xargs -n1 ./node_modules/.bin/prettier --write

# Show file somewhere else
git show revision:path/to/file

# Fetch all branches
git fetch --all
# Fetch a single branch
git fetch origin branchname
# Checkout a remote branch locally
git checkout --track origin/remotebranch

# Fetch all branches from single-branch clone
git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
git remote update
git fetch --unshallow
git fetch --depth 10  # fetch the last 10 commits

# Sign commits again until commithash
git rebase --exec 'git commit --amend --no-edit -n -S' -i COMMIT_ID

# Trace execution
GIT_TRACE=1 git commit -am 'blah'

# Find large commits
# https://stackoverflow.com/questions/10622179/how-to-find-identify-large-commits-in-git-history
git rev-list --objects --all |
  git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' |
  sed -n 's/^blob //p' |
  sort --numeric-sort --key=2 |
  cut -c 1-12,41- |
  $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest
