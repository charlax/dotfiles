# Archive (without the .git history)
git archive -o ~/Downloads/archive.tar.gz --format=tar HEAD

# bisect
git bisect start  # (from root folder)
git bisect good $commitid
git bisect bad $commitid

# List authors sorted by number of commits
git shortlog -ns
git shortlog -sn --all

# Check why file is gitignored
git check-ignore -v filename

# Checkout commit by date
git checkout `git rev-list -n 1 --before="2016-03-29 12:00" master`

# Clone only up to n commits
git clone --depth $n git@github.com:charlax/dotfiles

# Show which local branch is tracking which remote branch (git)
git remote show origin

# Push to same branch name
git push -u origin HEAD

# Get the git authors' email for the last 60 days
git log --since=60.days --format='%ae' | sort -u

# Show commits by author (partial match)
git log --author="..."

# Filter by multiple authors
git log --perl-regexp --author='^.*(Pierre|Peter)'

# Show diff with a change matching "query"
git log -p -G query

# Show git log excluding changes in a folder
git log . ':!subfolder_to_ignore'

# Show signatures
git log --show-signature

# Find first commit adding string
git log -p -S "the string" --reverse

# First first commit adding file
git log --diff-filter=A -- filename.py

# Exclude files ending with extension
git log -p -- ':!*.ipynb'

# Total line changed
git log --author="$author" --pretty=tformat: --numstat --since 2023-04-01 --until 2023-07-01 | gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s removed lines: %s total lines: %s\n", add, subs, loc }' -

# Other git log options
# --name-only      # show only filenames
# --name-status    # show filenames and status
# --stat           # show # lines changed for files
# --shortstat      # show total # lines changed
# --numstat        # show # lines without charts

# Format specifiers
# %as              # author date, short format (YYYY-MM-DD)
# %s               # subject

# For more complex needs
# - jc: converts git-log to json https://github.com/kellyjonbrazil/jc

# Output to json
jc git log --author=$author --shortstat > commits.json
# now you can use jq!

# Sort git commits by number of insertions
jc git log | jq ".|sort_by(.stats.insertions)"

# In a script, print message if there are unmerged changes
git diff-index --quiet HEAD -- || log_warning "You have uncommitted code"

# Diff: show only staged changes
git diff --cached
# Diff: show only file names, using relative path
git diff --relative --name-only
# Diff: do not show deleted files
git diff --name-only --diff-filter=ACMR

# Show all branches
git branch -a
# Show unmerged branches
git branch --no-merged master
git branch --merged  # show merged branches
# Delete remote branch
git push origin --delete $branch_name

# unstage all files
git reset
# undo last merge
git reset --hard ORIG_HEAD
# undo last rebase
git reset --hard ORIG_HEAD

# Undo changes in submodule
git submodule update --init
# Update submodule to latest remote commit
git submodule update --remote --merge

# Remove last commit
git reset --hard HEAD~1

# Squash and merge
git checkout master
git merge --squash name-of-branch
git commit  # should preserve the old commit messages

# Show name of current branch
git rev-parse --abbrev-ref HEAD

# Reword specific commit
git rebase -i COMMIT_ID
# then pick "reword" on the relevant commit

# Delete untracked files
git clean -n  # dry run
git clean -f  # actually delete the files

# Show git tags on remote
git ls-remote --tags origin

# Run prettier on all changed files
git diff --name-only dev --relative ./ | xargs -n1 ./node_modules/.bin/prettier --write

# Show file somewhere else
git show revision:path/to/file

# Fetch all branches
git fetch --all
# Fetch a single branch
git fetch origin branchname
# Checkout a remote branch locally
git checkout --track origin/remotebranch

# Fetch all branches from single-branch clone
git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
git remote update
git fetch --unshallow
git fetch --depth 10  # fetch the last 10 commits

# Sign commits again until commithash
git rebase --exec 'git commit --amend --no-edit -n -S' -i COMMIT_ID
# Until first commit, changing author
git rebase --exec 'git commit --amend --no-edit -n -S --author="..."' -i --root
# Rewrite author using new config
git commit --amend --no-edit -n -S --reset-author
# --author "..."

# Trace execution
GIT_TRACE=1 git commit -am 'blah'

# Find large commits
# https://stackoverflow.com/questions/10622179/how-to-find-identify-large-commits-in-git-history
git rev-list --objects --all |
  git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' |
  sed -n 's/^blob //p' |
  sort --numeric-sort --key=2 |
  cut -c 1-12,41- |
  $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest

# Replace accross all git files (needs GNU sed)
git ls-files -z . | xargs -0 gsed -i -e 's/Arguments :/Arguments:/g'

# List all unversioned files
git ls-files --others

# Rewrite all commit authors based on a mailmap file
# Requires install git-filter-repo (brew install git-filter-repo)
# Docs about .mailmap format: https://git-scm.com/docs/gitmailmap
git filter-repo --mailmap ./mailmap

# Delete all files matching path glob in history
git filter-repo --invert-paths --path-glob '*.tiff'

# Get total size of repo
git gc
git count-objects -vH

# Best practice for tagging
# -s signing
git tag -s $COMPONENT-v$VERSION -m "Release $COMPONENT version $VERSION"

# Conflicts markers when rebasing (diff3)
# (see doc/git.md)

# Other tools:
# tig

# See too:
# https://ohshitgit.com/
# https://github.com/git-tips/tips
