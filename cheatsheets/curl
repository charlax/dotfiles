# Download with same name
curl -O https://raw.githubusercontent.com/google/re2/main/doc/syntax.txt
# Save with specific name
curl -o re2.txt https://raw.githubusercontent.com/google/re2/main/doc/syntax.txt

# JSON query
curl -X POST --header "Content-Type: application/json" --data '{"username": "truc"}' $url
curl -X POST --header "Content-Type: application/json" -d @body.json $url

# Body
curl $url -d key=value1 -d key2=value2
curl $url -d "key=value1&key2=value2"

# Change Host
curl -H 'Host: truc.com' ...

# Options
-L                 # follow redirections
-s/--silent
-o/--output        # e.g. redirect response body to /dev/null
-k/--insecure      # do not check certificates
--remote-name-all  # issue multiple query (see below)
--resolve example.com:444:127.0.0.1  # Provide a host without changing /etc/hosts

# Path

# --path-as-is   # Tell curl to not handle sequences of /../ or /./ in the given URL path
curl --path-as-is $url/../../test.txt

# --request-target
curl "$url" --request-target "../" -v --path-as-is
# * Connected to ... port 8080 (#0)
# > GET ../ HTTP/1.1

# Upload
curl -F 'upload=@./file.png;type=image/png;filename=image.png'

# Request
-H 'X-foo: value'  # header

# POST with application/x-www-form-urlencoded
curl -X POST -d 'param1=value1&param2=value2' $host

# Custom CA certificate
curl --cacert ./tmp/caddy-cert.crt $url

# Multiple url
curl --remote-name-all https://example.com/a.html https://example.com/b.html

# Resources
# https://ec.haxx.se/http/http-multipart

# See also:
# xh      https://github.com/ducaale/xh (written in rust)
# httpie  https://httpie.io/ (Python)
# curlie  https://github.com/rs/curlie (Golang, tries to mimic curl)
