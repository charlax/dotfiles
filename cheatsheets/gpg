## GNUPG

## References

- https://eriksamuelsson.com/sign-git-commits-on-github-with-gpg-in-macos/
- https://docs.gitlab.com/ee/user/project/repository/gpg_signed_commits/index.html

## Key

```bash
# Create the key
gpg --full-gen-key

# Copy the long public key
gpg --armor --export | pbcopy
gpg --armor --export email@truc.com

# List all keys
gpg --list-keys

# Set the signing key for a repo
git config user.signingkey XXXXXXXXXXXX

# Get a key's id from public key
cat filename.pub | gpg --show-keys
# or
gpg --show-keys filename.pub

gpg --export-secret-keys $id > secret.key
```

## Encryption flow

```bash
# For the recipient: export the public key in binary format
gpg --output ~/Downloads/pubkey.gpg --export alice@cyb.org
# For the sender: download the public key and import it
gpg --import pubkey.gpg
# Encrypt the file
gpg --output filename.csv.enc --encrypt --recipient alice@cyb.org filename.csv
# For the recipient:
gpg --output filename.csv --decrypt filename.csv.env
```

## Symetric

```bash
# -a: use ASCII encoding armor
gpg -a --symmetric --cipher-algo AES256 my_file.txt
```
