# Build image
docker build -t thetest/thename:latest . && docker run -it --rm --name test thetest/thename:latest
# Override entrypoint
docker run -it --rm --name test --entrypoint /bin/bash test/top:latest

# Start an Ubuntu system
docker run -it ubuntu:latest /bin/bash

# Connect on a running container
docker exec -it $CONTAINER_ID bash

# Check the size of images
docker image ls

# Check the layers comprising an image
docker history $IMAGE_ID
# <missing> means the layer was built on another system

# Get labels, network, etc. for running container
docker inspect $CONTAINER_ID

# Show all ports
docker container ls --format "table {{.ID}}\t{{.Names}}\t{{.Ports}}" -a

# Get logs for a running container
docker logs $CONTAINER_ID

# List all containers ever created
docker ps --all

# Search for an image from registry
docker search postgres
docker image ls myregistry.azurecr.io/image-name

# Show history for an image
docker history postgres

# Pause all processes within one or more containers
docker pause  # also: unpause

# Show only names of running containers
# template context: https://docs.docker.com/engine/reference/commandline/ps/#formatting
docker ps --format "{{.Names}}"

# Remove one or more containers
docker rm
# Remove one or more images
docker rmi

# Verbose and disable cache (the cache part does not seem to work)
docker compose build --progress=plain --no-cache=true

# Delete all images, containers, volumes, networks for all stopped containers and unused images
docker system prune -a

# Empty BUILDKIT mount type=cache
docker builder prune --filter type=exec.cachemount

# Empty build cache and clean up stuff
docker system prune

# Get total size used by Docker (images, containers, volumes)
docker system df

# Kill all containers
docker kill $(docker ps -q)

# Update restart policy for all containers
for cid in $(docker ps -q); do docker update --restart unless-stopped $cid; done

# Delete docker volume
docker volume rm $volume_name
# If you get a "volume in use" error, you need to remove any container (even if stopped)
# associated with this volume:
docker container rm $containerid
docker volume rm $volume_name

# Get macOs logs about Docker
pred='process matches ".*(ocker|vpnkit).*" || (process in {"taskgated-helper", "launchservicesd", "kernel"} && eventMessage contains[c] "docker")'
/usr/bin/log stream --style syslog --level=debug --color=always --predicate "$pred"
# last 1 day
/usr/bin/log show --debug --info --style syslog --last 1d --predicate "$pred"
