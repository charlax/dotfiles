#!/usr/bin/env -S uv -q run -s

# /// script
# dependencies = [
#   "rich",
# ]
# ///

"""
Generated by ChatGPT
"""

import argparse
import os
import re
from typing import List, Dict

from rich.console import Console
from rich.markdown import Markdown


def get_md_files(paths: List[str]) -> List[str]:
    """Return a list of markdown files from given input paths."""
    md_files: List[str] = []
    for path in paths:
        if os.path.isdir(path):
            for root, _, files in os.walk(path):
                for file in files:
                    if file.endswith(".md"):
                        md_files.append(os.path.join(root, file))
        elif os.path.isfile(path) and path.endswith(".md"):
            md_files.append(path)
    return md_files


def extract_open_tasks(content: str) -> Dict[str, List[str]]:
    """Return a dict mapping section header to unresolved tasks in the content."""
    lines: List[str] = content.splitlines()
    section: str = "No section"
    tasks: Dict[str, List[str]] = {}
    header_re = re.compile(r"^(#+ .+)$")
    open_task_re = re.compile(r"^\s*-\s*\[( |\.|o)\]\s+.*")
    done_task_re = re.compile(r"^\s*-\s*\[x\]\s+.*", re.IGNORECASE)
    for line in lines:
        header_match = header_re.match(line)
        if header_match:
            section = header_match.group(1)
            continue
        if done_task_re.match(line):
            continue
        if open_task_re.match(line):
            tasks.setdefault(section, []).append(line)
    return tasks


def pretty_print_tasks(
    filename: str, tasks: Dict[str, List[str]], console: Console
) -> None:
    """Print tasks indented under filename, grouped by section, with markdown rendering."""
    console.rule(f"[bold blue]{filename}")
    for section, task_list in tasks.items():
        if not task_list:
            continue
        section_markdown = section
        tasks_markdown = "\n".join(task_list)
        # Indent markdown manually for visual nesting
        combined = f"{section_markdown}\n{tasks_markdown}"
        console.print(Markdown(combined), style="dim")
    console.print()  # Blank line


def main() -> None:
    """Parse arguments and process markdown files for unresolved tasks."""
    parser = argparse.ArgumentParser(
        description="Find unresolved markdown tasks in .md files."
    )
    parser.add_argument(
        "inputs", metavar="PATH", nargs="+", help="List of files or a folder."
    )
    args = parser.parse_args()
    md_files = get_md_files(args.inputs)
    if not md_files:
        print("No markdown files found.")
        return
    console = Console()
    for file in md_files:
        with open(file, encoding="utf-8") as f:
            content = f.read()
        tasks = extract_open_tasks(content)
        non_empty_tasks = {k: v for k, v in tasks.items() if v}
        if non_empty_tasks:
            pretty_print_tasks(file, non_empty_tasks, console)


if __name__ == "__main__":
    main()
