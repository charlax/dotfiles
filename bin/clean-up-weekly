#!/usr/bin/env python3

# See also: https://github.com/mac-cleanup/mac-cleanup-py/blob/main/mac_cleanup/default_modules.py

import argparse
import glob
import os
import subprocess
import sys
from pathlib import Path
from typing import List

sys.path.insert(0, str(Path(__file__).parent.parent))
import color  # noqa: E402

DIRECTORIES = ("~/Downloads", "~/Desktop")
IGNORE_UNCOMMITED_CODE_DIR = {"golang"}


def print_task(msg: str) -> None:
    print("\n")
    print(color.green(msg))


def listdir_nohidden(path):
    return glob.glob(os.path.join(path, "*"))


def run(cmd):
    print(cmd)
    subprocess.run(cmd, shell=True, check=True)


def clean_up_ruby(is_dry_run: bool = False):
    print_task("Cleaning up ruby")
    run("gem cleanup")


def clean_up_docker(is_dry_run: bool = False):
    print_task("Cleaning up Docker")
    run("docker system prune -af")


def empty_temp_dirs(is_dry_run: bool = False):
    directories = map(os.path.expanduser, DIRECTORIES)

    if is_dry_run:
        print("\nWould have removed:")

    for d in directories:
        if not listdir_nohidden(d):
            print(f"{d} is already empty")
            continue

        print_task(f"Emptying {d}")

        print(d)
        for f in listdir_nohidden(d):
            print(f"  {f}")

        if is_dry_run:
            continue

        run(f"trash {d}/*")


def check_for_uncommitted_code(is_dry_run: bool = False) -> None:
    """Make sure all code is committed and pushed."""
    print_task("Checking for uncommitted or unpushed code")
    path = os.environ.get("CODE_PATH")
    if not path:
        print(color.red("CODE_PATH environment variable not set"))

    for d in [x for x in Path(path).iterdir() if x.is_dir()]:
        if d.name in IGNORE_UNCOMMITED_CODE_DIR:
            continue

        result = subprocess.run(
            "git status --porcelain", shell=True, capture_output=True, cwd=d
        )
        if result.returncode != 0:
            print(color.red(f"{d}: git status failed"))
            print(result.stderr)
            continue

        if result.stdout:
            print(color.magenta(f"{d} has uncommitted code"))

        result = subprocess.run(
            "git diff ..@{u}", shell=True, capture_output=True, cwd=d
        )
        if result.returncode != 0:
            print(color.red(f"{d}: git diff failed"))
            print(result.stderr)
            continue

        if result.stdout:
            print(color.magenta(f"{d} has unpushed code"))


CHECKS = {
    "empty_temp_dirs": empty_temp_dirs,
    "clean_up_ruby": clean_up_ruby,
    "check_for_uncommitted_code": check_for_uncommitted_code,
    # "clean_up_docker": clean_up_docker
}


def main(is_dry_run: bool, checks: List[str] = None) -> None:
    to_run = checks if checks else CHECKS.keys()

    for c in to_run:
        CHECKS[c](is_dry_run)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Clean up files and run jobs")
    parser.add_argument("--checks", nargs="+", help="run only thoses checks")
    parser.add_argument(
        "--dry-run", action="store_true", help="do not actually delete anything"
    )

    args = parser.parse_args()

    main(is_dry_run=args.dry_run, checks=args.checks)
