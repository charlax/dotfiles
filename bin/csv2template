#!/usr/bin/env python3

# source  ~/.pyenvs/csv2template/bin/activate

"""
csv2template.py

Objective: takes a CSV and a Jinja2 template as input, output the
rendered template.
"""
import argparse
import contextlib
import csv
import functools
import sys
import uuid

import jinja2

HELP = """
Examples
--------

# Renders each line as a file named after the pattern
$ csv2template --template template.md --outfiles-name-pattern "out/{{ Name }}.md" file.csv
"""


def get_template(args):
    """Return template."""
    template_string = args.template_string
    if not template_string:
        if args.use_csv_header_as_template:
            template_string = args.csv.readline()
        else:
            template_string = args.template.read()

    template = jinja2.Template(template_string)
    return template


def format_uuid(value):
    """Format a uuid."""
    return str(uuid.UUID(value))


@contextlib.contextmanager
def get_outfile(*, outfile, outfiles_name_template, line):
    """Return output file handler."""
    if outfile and outfiles_name_template:
        raise ValueError("Can't provide both outfile and name template")

    if outfile:
        yield outfile

    if outfiles_name_template:
        filename = outfiles_name_template.render(**line)
        yield open(filename, "w")


def main(args):
    """Render the template."""
    jinja2.defaults.DEFAULT_FILTERS['format_uuid'] = format_uuid
    template = get_template(args)

    if args.header:
        args.outfile.write(args.header + "\n")

    get_output = functools.partial(
        get_outfile,
        outfile=args.outfile,
        outfiles_name_template=jinja2.Template(args.outfiles_name_pattern))

    csv_file = csv.DictReader(args.csv)
    rows = ({k.strip(): v.strip() for k, v in row.items()}
            for row in csv_file)
    for line in rows:
        line = {k.replace(' ', '_'): v for k, v in line.items()}
        with get_output(line=line) as outfile:
            outfile.write(template.render(**line) + "\n")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Render the template using CSV data",
        epilog=HELP,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument("csv", nargs="?", type=argparse.FileType('rU'),
                        default=sys.stdin)
    parser.add_argument("--header",
                        help='content to put at the top of output')

    template_group = parser.add_mutually_exclusive_group(required=True)
    template_group.add_argument(
        "--template",
        type=argparse.FileType('r'),
        help='template filename')
    template_group.add_argument(
        "--template-string",
        help='template string')
    template_group.add_argument(
        "--template-use-csv-header",
        action='store_true',
        dest='use_csv_header_as_template',
        help="Use the CSV's first line as the template")

    outfile_group = parser.add_mutually_exclusive_group()
    outfile_group.add_argument('--outfile',
                               type=argparse.FileType('w'),
                               help="Defaults to standard output")
    outfile_group.add_argument("--outfiles-name-pattern",
                               help="Pattern for output filenames")

    args = parser.parse_args()

    if not (args.outfile or args.outfiles_name_pattern):
        args.outfile = sys.stdout

    main(args)
