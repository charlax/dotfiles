#!/usr/bin/env python3

# source  ~/.pyenvs/csv2template/bin/activate

"""
csv2template.py

Take a CSV and a Jinja2 template as input, output the rendered template.

"""

import argparse
import contextlib
import csv
import functools
import os.path
import sys
import uuid

import jinja2

DEFAULT_SKIP_COLUMN_NAME = "__SKIP__"
HELP = """
Advanced topics
---------------

* You can skip rows by adding a column `__SKIP__` in your CSV, and put a
  truthy value ("TRUE", "True", "1", "YES", "yes") in it.

Examples
--------

# Renders each row as a file named after the pattern
csv2template --template template.md --outfiles-name-pattern "out/{{ Name }}.md" file.csv

# Renders each row as a file named after the "__FILENAME__"'s column
# value and in a folder named "out"
csv2template --template template.md --outfolder out --outfiles-name-use-column __FILENAME__ file.csv
"""

TRUTHY_VALUES = {'True', 'TRUE', '1', 'yes', 'YES'}


def get_template(args):
    """Return template."""
    template_string = args.template_string
    if not template_string:
        if args.use_csv_header_as_template:
            template_string = args.csv.readline()
        else:
            template_string = args.template.read()

    template = jinja2.Template(template_string)
    return template


def format_uuid(value):
    """Format a uuid."""
    return str(uuid.UUID(value))


@contextlib.contextmanager
def get_outfile(*,
                outfile,
                outfiles_name_template,
                outfiles_name_use_column,
                outfolder,
                line):
    """Return output file handler."""
    if len(list(filter(
            None,
            (outfile, outfiles_name_template, outfiles_name_use_column)))) != 1:
        raise ValueError("Contradicting arguments")

    if outfile:
        yield outfile

    if outfiles_name_template:
        filename = outfiles_name_template.render(**line)

    if outfiles_name_use_column:
        filename = line[outfiles_name_use_column]

    if outfolder:
        filename = os.path.join(outfolder, filename)

    sys.stderr.write("Writing to: %s\n" % filename)

    # TODO: ideally we should close it
    yield open(filename, "w")


def should_skip_row(line, *, column_name):
    """Return true if the row should be skipped."""
    return line[column_name].strip() in TRUTHY_VALUES


def main(args):
    """Render the template."""
    jinja2.defaults.DEFAULT_FILTERS['format_uuid'] = format_uuid
    template = get_template(args)

    if args.header:
        args.outfile.write(args.header + "\n")

    filename_template = (args.outfiles_name_pattern
                         and jinja2.Template(args.outfiles_name_pattern))
    get_output = functools.partial(
        get_outfile,
        outfolder=args.outfolder,
        outfile=args.outfile,
        outfiles_name_template=filename_template,
        outfiles_name_use_column=args.outfiles_name_use_column,
    )

    csv_file = csv.DictReader(args.csv)
    rows = ({k.strip(): v.strip() for k, v in row.items()}
            for row in csv_file)
    for line in rows:
        line = {k.replace(' ', '_'): v for k, v in line.items()}
        if should_skip_row(line, column_name=args.skip_column_name):
            continue

        with get_output(line=line) as outfile:
            outfile.write(template.render(**line) + "\n")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Render the template using CSV data",
        epilog=HELP,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument("csv", nargs="?", type=argparse.FileType('rU'),
                        default=sys.stdin)
    parser.add_argument("--header",
                        help="content to put at the top of output")
    parser.add_argument("--skip-column-name",
                        type=str,
                        default=DEFAULT_SKIP_COLUMN_NAME,
                        help="skip rows that have a truthy value in this column"
                        )
    parser.add_argument("--outfolder",
                        help="where to export the files")

    template_group = parser.add_mutually_exclusive_group(required=True)
    template_group.add_argument(
        "--template",
        type=argparse.FileType('r'),
        help='template filename')
    template_group.add_argument(
        "--template-string",
        help='template string')
    template_group.add_argument(
        "--template-use-csv-header",
        action='store_true',
        dest='use_csv_header_as_template',
        help="use the CSV's first line as the template")

    outfile_group = parser.add_mutually_exclusive_group()
    outfile_group.add_argument('--outfile',
                               type=argparse.FileType('w'),
                               help="defaults to standard output")
    outfile_group.add_argument("--outfiles-name-pattern",
                               type=str,
                               help="pattern for output filenames")
    outfile_group.add_argument("--outfiles-name-use-column",
                               type=str,
                               help="use column with this name for filenames")

    args = parser.parse_args()

    if not (args.outfile
            or args.outfiles_name_pattern
            or args.outfiles_name_use_column):
        args.outfile = sys.stdout

    main(args)
