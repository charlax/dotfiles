#!/usr/bin/env python3

"""

Dependencies:

- fd
- fzf

Example template:

Filename: "Template Interview {name}.md"

```markdown
# Interview with

Name: {name}
```

Variables:

- `today` replaced with date, e.g. '2023-01-01'
- `now` replace with date and time, e.g. '2023-01-01 15:35'

Uses:

- Interview notes

"""

import argparse
import csv
import itertools as it
import io
import os
import subprocess
import sys
from datetime import datetime
from functools import reduce
from pathlib import Path
from typing import Dict, Set, Iterator, Any, List, Optional
from string import Formatter

# This script has no dependency (e.g., jinja). (jinja mentioned here for
# grepping)


def prompt(name: str) -> str:
    value = input(f"{name}: ")
    return value


def get_base_context() -> Dict[str, Any]:
    return {
        "today": datetime.now().strftime("%Y-%m-%d"),
        "now": datetime.now().strftime("%Y-%m-%d %H:%M"),
    }


def get_context(names: Set[str], base: Dict[str, str]) -> Dict[str, str]:
    """Get context variables."""

    def reducer(acc: Dict[str, str], name: str) -> Dict[str, str]:
        value = prompt(name)
        acc[name] = value
        return acc

    return reduce(reducer, sorted(names), base)


def get_required_variables(template: str) -> Iterator[str]:
    parsed = Formatter().parse(template)
    return list(filter(None, [fieldname for _, fieldname, _, _ in parsed]))


def choose_template(dir: Path) -> Path:
    """Let the user choose from one template from folder."""
    ls = subprocess.Popen(["fd", ".", str(dir)], stdout=subprocess.PIPE)
    r = subprocess.check_output(["fzf"], stdin=ls.stdout).decode("utf-8").strip()
    returned = Path(r)
    if not returned.exists():
        raise OSError(f"File {returned} does not exist")
    return returned


def get_editor_cmd(editor: str) -> List[str]:
    """Get editor command."""
    if editor == "ia":
        return ["open", "-a", "IA Writer"]
    return [editor]


def get_filename(template_filename: str, context: Dict[str, str]) -> Path:
    """Return filename for the rendered template."""
    return Path(
        template_filename.format(**context)
        .replace("template", "")
        .replace("Template", "")
        .replace("..", ".")
        .strip()
    )


def render(content_template: str, filename: Path, context: Dict[str, str]) -> None:
    """Render the file."""
    if filename.exists():
        raise OSError(f"File {filename} already exists")

    with open(filename, "w") as f:
        f.write(content_template.format(**context))


def main(
    template: Path, editor: str = "", csvfile: Optional[io.TextIOWrapper] = None
) -> int:
    template_path = choose_template(template) if template.is_dir() else template
    template_filename = str(template_path.name)

    with open(template_path) as f:
        content_template = f.read(100000)

    base_context = get_base_context()

    required_variables = set(
        it.chain.from_iterable(
            map(get_required_variables, [template_filename, content_template])
        )
    ) - set(base_context.keys())

    if csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            context = {**base_context, **row}
            filename = get_filename(template_filename, context)
            render(content_template, filename, context)

    else:
        context = get_context(required_variables, base_context)
        filename = get_filename(template_filename, context)
        render(content_template, filename, context)

        print(str(filename))

        if editor:
            editor_parsed = get_editor_cmd(editor)
            subprocess.Popen([*editor_parsed, str(filename)])

    return 0


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="render a template file")
    parser.add_argument("template", help="template filename or folder")
    parser.add_argument(
        "-e",
        "--editor",
        help="editor",
        default=os.environ["EDITOR"],
    )
    parser.add_argument(
        "--csv",
        help="CSV with template variables",
        type=argparse.FileType("r"),
    )

    args = parser.parse_args()

    sys.exit(main(template=Path(args.template), editor=args.editor, csvfile=args.csv))
