#!/bin/zsh

set -eo pipefail
IFS=$'\n\t'
PROGRAM_NAME=$0

red=$'\e[1;31m'
grn=$'\e[1;32m'
yel=$'\e[1;33m'
blu=$'\e[1;34m'
mag=$'\e[1;35m'
cyn=$'\e[1;36m'
end=$'\e[0m'

function usage {
    echo "Usage: $PROGRAM_NAME [--parent/-p] [--help/-h] [-t/--testing] path [path...]"
    exit 1
}

HELP=false
TESTING=false
OPTIONS=()
PARENT=""
# Tried docx (weird margins), rtf (imported in raw format), opendocument (same), odt (pretty good)
FORMAT="html"
# -s: standalone HTML file
PANDOC_OPTIONS=(-s -H ${DOTFILES}pandoc/pandoc.css)

while true; do
    # ${parameter:-word}: if parameter is unset, return word
    # See Shell Parameter Expansion
    case "${1:-}" in
        -h | --help)
            HELP=true
            shift
            ;;
        -t | --testing)
            TESTING=true
            shift
            ;;
        -p | --parent)
            shift
            if test $# -gt 0; then
                PARENT=$1
            else
                echo "no parent specified"
                usage
            fi
            shift
            ;;
        -*)
            echo >&2 "Invalid option: $1"
            usage
            ;;
        *)
            OPTIONS+=("${1:-}")
            if test $# -gt 0; then
                shift
            else
                break
            fi
            ;;
    esac
done

if [ $HELP = true ]; then
    usage
fi

if [ -z "$OPTIONS" ]; then
    echo >&2 "Invalid number of argument, need markdown path to be passed"
    usage
fi

function convert_and_export () {
    filename=$1
    export_filename=$(echo "$(mktemp -d)/${${filename:r}:t}.$FORMAT")

    printf "\n${grn}Converting $filename${end}\n"
    echo "Exporting to $export_filename"
    set -x
    pandoc $filename ${PANDOC_OPTIONS[@]} --from markdown --to $FORMAT -o "$export_filename"
    set +x
    [ $? -ne 0 ] && { printf "Conversion failed\n"; rm "$export_filename"; exit 1; }

    if [ $TESTING = true ]; then
        open "$export_filename"
        exit 0
    fi

    ls $export_filename

    if [ -z $PARENT ]; then
        to_run="gdrive import \"$export_filename\""
    else
        to_run="gdrive import -p $PARENT \"$export_filename\""
    fi

    set -x
    ls $export_filename
    eval $to_run
    set +x

    rm "$export_filename"
}

for filename in $OPTIONS; do
    convert_and_export $filename
done
