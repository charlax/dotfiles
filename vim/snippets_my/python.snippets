snippet skeletton_script "Python script skeletton" b
#!/usr/bin/env python3
import argparse
import sys
from typing import TextIO


def main(infile: TextIO, outfile: TextIO) -> int:
    infile.close()
    outfile.close()
    return 0


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="${0:description}")
    parser.add_argument(
        "infile", nargs="?", type=argparse.FileType("r"), default=sys.stdin
    )
    parser.add_argument(
        "outfile", nargs="?", type=argparse.FileType("w"), default=sys.stdout
    )
    parser.add_argument("--release", action="store_true")
    args = parser.parse_args()

    sys.exit(main(args.infile, args.outfile))
endsnippet

snippet skeletton_script_typer "Python script skeletton with Typer" b
#!/usr/bin/env python3
from pathlib import Path
from typing import Optional

import typer

# argument are required, options are optional


def main(config: Optional[Path] = typer.Argument(None, dir_okay=True), config_as_file: typer.FileText = typer.Option(...)):
    """${0:Do something}"""
    typer.echo(f"Hello {name}")


if __name__ == "__main__":
    typer.run(main)
endsnippet
