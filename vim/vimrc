" Must be first.
set nocompatible

syntax enable
set encoding=utf-8

" Make sure no shortcut mapped in insert mode is
" using leader, otherwise you might trigger shortcuts while typing.
let mapleader = "\<Space>"
let maplocalleader = "\<Space>"

" Specify a directory for plugins (for vim-plug)
call plug#begin('~/.vim/plugged')

" Create your own text objects, required by vim-textobj-comment
Plug 'kana/vim-textobj-user'

" Text objects for comments
Plug 'glts/vim-textobj-comment'

" Interpret a file by function and cache file automatically
Plug 'MarcWeber/vim-addon-mw-utils'
"
" Snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Insert or delete brackets, parens, quotes in pair
" Note that LunarWatcher is a (maintained) fork of jiangmiao/auto-pairs
Plug 'LunarWatcher/auto-pairs', {'for': ['javascript', 'typescript', 'typescriptreact', 'typescript.tsx']}

" Color schemes
Plug 'sainnhe/everforest'

Plug 'fatih/vim-go', { 'for': 'go', 'do': ':GoInstallBinaries' }

" Not included in vim-polyglot
Plug 'Glench/Vim-Jinja2-Syntax', { 'for': 'jinja2' }

Plug 'greyblake/vim-preview'
"
Plug 'hynek/vim-python-pep8-indent', { 'for': 'python' }

" Syntax highlighting to RTF
Plug 'jdonaldson/rtf-highlight'

" Fuzzy finder. This will also install fzf
" It exposes functions such as :Rg (same as :Ack) :Files :Tabs etc.
" https://github.com/junegunn/fzf
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all --no-update-rc' }
Plug 'junegunn/fzf.vim'

" Displays tags in a window, ordered by class etc.
Plug 'majutsushi/tagbar'

" A tree explorer plugin
Plug 'scrooloose/nerdtree', { 'on':  ['NERDTreeToggle', 'NERDTreeFind'] }

Plug 'sukima/xmledit', { 'for': 'xml' }

Plug 'tomtom/tlib_vim'

Plug 'tpope/vim-commentary'
" Enable repeating supported plugin maps with '.'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'

Plug 'vim-scripts/LaTeX-Box', { 'for': 'latex' }

Plug 'vim-scripts/applescript.vim', { 'for': 'applescript' }

" Asynchronous Lint Engine with LSP support
Plug 'dense-analysis/ale'

" Automatically discover and properly update ctags files on save
Plug 'ludovicchabant/vim-gutentags'

" Simple status line
Plug 'itchyny/lightline.vim'
" ALE-status line integration
Plug 'maximbaz/lightline-ale'

" Git gutter
Plug 'airblade/vim-gitgutter'
" Git integration
Plug 'tpope/vim-fugitive'

" Solid language pack
Plug 'sheerun/vim-polyglot'

" Search local vimrc files (".lvimrc") in the tree (root dir up to current dir) and load them
Plug 'embear/vim-localvimrc'

" Search with rg/ack/...
" https://github.com/wincent/ferret
" Provides :Ack :Back :Lack etc.
Plug 'wincent/ferret'

if has('python')
  " Match HTML tags
  Plug 'Valloric/MatchTagAlways'
endif

" Auto close HTML tags
Plug 'alvan/vim-closetag'

" Clojure REPL
Plug 'tpope/vim-fireplace'

" Tabular needs to be loaded first
Plug 'godlygeek/tabular'
" See help at https://github.com/preservim/vim-markdown
Plug 'preservim/vim-markdown'

" LSP support and autocompletion
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Extensions
Plug 'neoclide/coc-json', {'do': 'yarn install --frozen-lockfile'}
Plug 'fannheyward/coc-pyright', {'do': 'yarn install --frozen-lockfile'}

" Initialize plugin system
call plug#end()

" ============================================================
" Filetype detection
" ============================================================

if has('autocmd')
    " load file type plugins + indentation
    filetype plugin indent on

    " Custom initialization
    au BufRead,BufNewFile *.applescript setf applescript
    au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby

    " Varnish
    au BufRead,BufNewFile *.vcl setf c

    " Prose
    au FileType {md,markdown,mdx,tex,txt,rst} call s:setup_for_prose()

    " In Makefiles, use real tabs, not tabs expanded to spaces
    au FileType make set noexpandtab ts=4
    au FileType make let b:EditorConfig_disable = 1

    " Use tabs in Applescript
    au FileType applescript set noexpandtab smartindent

    " YAML
    au FileType yaml set softtabstop=2 tabstop=2 shiftwidth=2 expandtab autoindent

    " HTML, XML, etc.
    au FileType xml set softtabstop=2 tabstop=2 shiftwidth=2 expandtab autoindent
    au FileType xsd set softtabstop=2 tabstop=2 shiftwidth=2 expandtab autoindent

    " SQL
    au FileType sql set softtabstop=4 tabstop=4 shiftwidth=4 expandtab autoindent

    " ZSH
    au FileType zsh set expandtab

    " Json
    au FileType json,jsonc set softtabstop=2 tabstop=2 shiftwidth=2 expandtab autoindent

    " Remember last location in file, except in Git commit message
    au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
          \| exe "normal! g`\"" | endif

    autocmd FileType arduino,c,cpp,java,php,python,javascript,html,css,mako,sql,json,jsonc,rst,cucumber,yaml,zsh autocmd BufWritePre <buffer> :call TrimEndLines()

endif


" ============================================================
" Vim UI configuration
" ============================================================

set mouse=a

" Don't beep
autocmd! GUIEnter * set vb t_vb=

" Necessary for color schemes
if has('termguicolors')
  set termguicolors
endif

if has('gui_running') || has('gui_vimr')
    set background=dark
else
    set background=dark
endif

let g:everforest_better_performance = 1
let g:everforest_disable_italic_comment = 1

" To find color schemes:
" https://colorswat.ch/vim/list?bg=dark&cat=all&o=star
" fails on first startup because this colorscheme is not available
silent! colorscheme everforest

" Change cursor shape in insert mode (works in iTerm)
" Might not work as is in tmux
" https://stackoverflow.com/questions/6488683/how-to-change-the-cursor-between-normal-and-insert-modes-in-vim
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" display incomplete commands
set showcmd

" Store lots of :cmdline history
set history=1000

" Reload files changed outside vim
set autoread

" Sets the terminal title to Vim title
set title

" Whitespace
set tabstop=4 shiftwidth=4
set softtabstop=4 " makes the spaces feel like real tabs
set expandtab

" Remove trailing whitespace before save
autocmd BufWritePre * :call StripTrailingWhitespaces()

" Backspace through everything in insert mode
set backspace=indent,eol,start

" No bell
set visualbell

" Refresh every 400ms, instead of every 4 sec (default)
set updatetime=400

" Leaving buffer goes into normal mode
autocmd BufEnter * stopinsert

" Files to hide in netrw
let g:netrw_list_hide= '.*\.swp$,.*\.pyc$'

" All folds open when open a file
set foldlevelstart=20

" More natural split opening
set splitbelow
set splitright

" Always display status line
set laststatus=2

" This would make the default clipboard the system one. Operations such as yy,
" D, and P work with the system clipboard. No need to prefix them with \"+ or
" \"*.  It is *deactivated* right now because it prevents replacing `cw` with
" the content of the system clipboard.
"
" set clipboard=unnamed

" For security reasons, activate modeline only for cheatsheets
if expand('%:p:h') == expand('$DOTFILES/cheatsheets')
    set modeline
    set modelines=1
    let g:ale_fix_on_save = 0
endif

" ============================================================
" Wrapping, textwidth, text formatting
" ============================================================

" Use softwrapping (i.e. make the text appear as wrapped)
setlocal textwidth=0
setlocal wrap
set colorcolumn=79

" Showing invisible characters with the same characters that TextMate uses
set list
set listchars=tab:▸\ ,eol:¬

" :help fo-table
" q: Allow formatting of comments with "gq".
" c: Auto-wrap comments using textwidth
" n: When formatting text, recognize numbered lists.
" 1: Don't break a line after a one-letter word.
" j: Delete comment character when joining commented lines
setlocal formatoptions=qcn1j

function! s:setup_for_prose()
    " Use softwrap as well
    setlocal textwidth=0
    setlocal linebreak
    setlocal spell
    " For bulleted list to get correct indentation
    setlocal autoindent

    " Respect indentation when breaking lines
    setlocal breakindent
    " Indent only list items
    setlocal breakindentopt=list:2
    " See other config in ftplugin/markdown.vim

    " Spell lang
    nnoremap <Leader>f <Esc>:setlocal spelllang=fr<CR><Esc>:setlocal spell<CR>
endfunction

" ============================================================
" Searching
" ============================================================

" Highlight searches by default
set hlsearch

" Find the next match as we type the search
set incsearch
set ignorecase
set smartcase

" Clearing highlighted searches
nmap <silent> ,/ :nohlsearch<CR>

" The wildmenu is for command line completion
" tab completion in command line
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,*.pyc,.svn,vendor/gems/*,*/build/*
" show list instead of just completing
set wildmenu
" command <Tab> completion, list matches, then longest common part, then all.
set wildmode=list:longest,full

" Status bar
set laststatus=2
set statusline=%y                      " filetype
set statusline+=\ %F                   " full path to file
set statusline+=%h%m%r                 " flags
set statusline+=%=                     " right-align
set statusline+=%l/%L\ (%P)\ c\ %c\ \  " cursor column, line, total lines, %

" Provide some context when editing
set scrolloff=5

" Line numbers
set number

" Fixing Vim's regex handling
nnoremap / /\v
vnoremap / /\v

" ============================================================
" Paths
" ============================================================

" where to put backup files.
set backupdir=~/.vim/temp/backup
" where to put swap files.
set directory=~/.vim/temp/temp
" useful for webpack-dev-server
set backupcopy=yes
" .netrwhist
let g:netrw_home = expand('~/.vim/temp/')

" tags
set tags=./tags;,./tags_env;

" My other functions

source $HOME/.vim/my_functions.vim
source $HOME/.vim/abbreviations.vim
" Plugin-specific configuration
source $HOME/.vim/pluginsrc.vim
" Keyboard shortcuts
source $HOME/.vim/keys.vim
